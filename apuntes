01_Linux consta de 3 partes principales:
	Kernel: Nucleo del sistema. Gestiona y administra los recursos de hardware de una computadora, como el CPU, la memoria y los perifericos
	Shell: Es un interprete, un programa con una interfaz de usuario que nos permite ejecutar aplicaciones en un lenguaje de alto nivel y procesarlas en un lenguaje de bajo nivel.
	Aplicaciones: Son los programas con los que interactuamos dia a dia. Libre Office, PDF Reader, etc
	

02_Tipos de shell
	a- sh: Creada en los laboratorios Bell, por Steve Born. Fue la primera shell utilizada por los sistemas operativos Unix
	b- zsh: Es un interprete de comandos que puede funcionar como shell interactiva o interprete de lenguaje de scripting. Algunas de sus ventajas son:
		- eficiencia
		- completado de tabulador
		- expansion de nombre de ficheros mejorada
		- manejo de arrays
		- totalmente personalizable
	c- csh: Fue diseñada para permitir a los usuarios escribir programas en script de shell con una sintaxis muy similiar al lenguje de programacion C
	d- bash: La Shell Bourne-Again es una versión actualizada de la Shell Bourne original creada por la Free Software Foundation en su proyecto de código abierto GNU. 3
		 Su sintaxis es similar a la utilizada por la Shell Bourne, sin embargo, incorpora algunas de las funcionalidades más avanzadas que se encuentran en las shells C, TC y Korn.
		 En	tre las funcionalidades adicionales que carecía Bourne, está la capacidad para completar nombres de archivos pulsando la tecla TAB, la capacidad de recordar un historial de 
		 comandos recientes y la capacidad de ejecutar múltiples programas en segundo plano a la vez. Conocida como "Bash" (Bourne again shell)

03_Comandos basicos para recuperar info de un comando:
	a- man seguido del comando [man + (comando)]
	b- info seguido del comando [info + (comando)]

04_Que es el bash scripting?
	La idea fundamental del bash scripting es poder ejecutar multiples comando de manera secuencial, para poder automatizar una tarea en especifico atravez de una serie de rutinas comandos 
	procedimientos, etc. Estos comandos son colocados en una archivo de texto simple y ejecutados en una terminal por el usuario.

05_Como ejecutar un script con argumentos?
    a- $0 --> El nombre del script
    b- $1 al ${10} --> El numero de argumentos,si son mas de un digito se utilizan llaves
    c- $# --> Contador de argumentos
    d- $* --> Refiere a todos los argumentos

06_Como realizar la sustitucion de comandos en variables?
    La idea de la sustitucion de comandos, es poder almacenar la salida de la ejecucion de un comando en una variable, para poder volver a utilizar esta informacion. Esto se puede hacer de dos formas:
        a- Usando el backtick caracter (`)
        b- Usando el signo de dolar con el formato --> $(comando)

07_Como realizar debug de un script?
    Existen dos opciones para debugear un script con el comando bash. Estas son:
        a- con el parametro [-v] podemos ver un resultado detallado de nuestro script linea por linea
        b- con el parametro [-x] podemos obtener un detalle de los comandos utilizados y su salida

08_Como capturar informacion del usuario?
    Para capturar informacion del usuario se utiliza el comando "read" y se puede utilizar de dos maneras:
        a- utilizarlo en conjunto con el comando echo
        b- utiiizarlo solo

09_Expresion Regulares
    Cuando se solicita ingresar informacion a traves de un programa por parte del usuario, independientemente del leguaje de programacion, es importante considerar la validacion de la informacion, asi como su tamano, tipo de dato, formato soportado etc.
    En la programacion bash, se utilizas expresion regulares (cadena de caracteres que definen un patron de busqueda) para validar la informacion.
    Criterios a tener presente:
        a- [^] Caracter de inicio de un expresion regular
        b- [$] Caracter de fin de una expresion regular
        c- [*] Caracter que representa cero o mas ocurrencias de la expresion
        d- [+] Caracter que representa una o mas ocurrencias de la expresion
        e- [{n}] Representa n veces de una expresion
        f- [[]] Representa un conjunto de caracteres, por ejemplo [a-z]

10_Como validar tamanos y tipo de dato en el ingreso de la informacion?
    Con el comando "read" agregando el parametro -n podemos definir la longitud de los datos a ingresar. Para el tipo de dato, debemos utilizar expresiones regulares.

11_Como utilizar las sentencias if, elif, else?
    El formato de uso de estas condiciones es:
        if [ condition ]; then
            statement 1
        elif [ condition ]; then
            statement 2
        else
            statement 3
        fi
    Dentro de las condiciones, podemos utilizar tanto operadores logicos como operadores condicionales. Otra cosa a tener en cuenta es que el flujo de programa ingresar al if solo si la condicion es verdadera
    Operadores relacionales utilizados en las condiciones:
        a- [-eq] "is equal to"--> Igual a
        b- [-ne] "is not equal to" --> No es igual a
        c- [-gt] "is great than" --> Mayor a
        d- [-ge] "is greater than or equal to" --> Mayor o igual a
        e- [-lt] "is less than" --> Menor a
        f- [-le] "is less than or equals to" --> Menor o igual a

12_Como utilizar los if anidados?
    El formato de uso de estas condiciones es:
        if [ condition ]; then
            if [ condition ]; then
                statement 1
            else
                statement 2
        else
            statement 3
        fi
    Los operadores a utilizar pueden ser tanto logicos [ && || ]como condicionales [ -ne -eq ]

13_Como utilizar expresiones condicionales?
    Son untilizadas para tomar una desicion o una iteracion. Estan formadas por una o mas condiciones de tipos de datos diferentes. Se utilizan tanto operadores relacionales como condicionales.
 
14_Como utilizar las setencias case?
    Se utiliza para evaluar expresiones, sean un entero o una cadena. Similar a la setencia swich de algunos lenguajes de programacion. Tambien puede evaluar rango de caracteres:
        case expression in
        opcion1)
            statements 1;;
        opcion2)
            statements 2;;
        ....
        esac
15_Como utilizar arreglos?
    Un arreglo es una variable con varios elementos. Para crear arreglos se debe colocar los elementos dentro de un barckets "nombreArreglo=(valor1, valor2, ... varlorN)" o utilizar rangos.
    El indice de un arreglo comienza en 0. Con el comando unset nombreArreglo[pos] podemos eliminar elementos de un arreglo
